user nginx;
worker_processes 1;
events {
  worker_connections 1024;
}
http {
  resolver 127.0.0.11 ipv6=off valid=30s;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  upstream repository_service_cluster {
    server repository-service:8080;
  }
  upstream query_service_cluster {
    server query-service:8080;
  }
  upstream search_service_cluster {
    server query-service:8080;
  }
  upstream pusher_service_cluster {
    server pusher-service:8080;
  }
  upstream kaiser_engine_cluster {
    server kaiser-service:8080;
  }

  server {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    add_header Access-Control-Allow-Origin *;

    location ~ ^/kaiser/.* {
        limit_except GET POST OPTIONS {
            deny all;
        }
        rewrite ^/kaiser/(.*)$ /$1? break;
        proxy_pass http://kaiser_engine_cluster;
    }

    location ~ ^/query/.* {
        limit_except GET OPTIONS {
            deny all;
        }
        rewrite ^/query/(.*)$ /$1$args? break;
        proxy_pass http://query_service_cluster;
    }
    
    location ~ ^/repository/.* {
        limit_except POST PUT OPTIONS {
            deny all;
        }
        rewrite ^/repository/(.*)$ /$1? break;
        proxy_pass http://repository_service_cluster;
    }

    location ~ ^/pusher/.* {
        limit_except HEAD GET POST PUT PATCH DELETE OPTIONS {
            deny all;
        }
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        rewrite ^/pusher/(.*)$ /$1? break;
        proxy_pass http://pusher_service_cluster;
    }
  
  }
}